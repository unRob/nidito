server_names_hash_bucket_size 64;
log_format json_combined escape=json
  '{'
    '"time_local":"$time_local",'
    '"remote_addr":"$remote_addr",'
    '"remote_user":"$remote_user",'
    '"request":"$request",'
    '"status": "$status",'
    '"body_bytes_sent":"$body_bytes_sent",'
    '"request_time":"$request_time",'
    '"http_referrer":"$http_referer",'
    '"http_user_agent":"$http_user_agent"'
  '}';
map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

{{- $dc := env "node.region" }}
{{- with secret (printf "nidito/config/datacenters/%s/dns" $dc) }}
{{- scratch.Set "zone" .Data.zone }}
{{- end }}

{{- scratch.Set "network-external" "0.0.0.0/0" }}
{{- range secrets "nidito/config/networks/" }}
  {{- if not (in . "/") }}
    {{- $netName := . }}
    {{- with secret (printf "nidito/config/networks/%s" .) }}
      {{- if index .Data "core" }}
      {{- scratch.Set "core-network-range" .Data.range }}
      {{- scratch.Set "core-network-name" $netName }}
      {{- end }}
      {{- scratch.Set (printf "network-%s" $netName) .Data.range }}
    {{- end }}
  {{- end }}
{{- end }}

{{- $nodeName := env "node.unique.name"}}
{{ range services (printf "@%s" $dc) }}
  {{- if in .Tags "nidito.http.enabled" }}
    {{- range service .Name }}
# consul/{{ .Name }}
server {
  listen *:80;
  server_name {{ .Name }} {{ .Name }}.{{ scratch.Get "zone" }};
  return 301 https://{{ .Name }}.{{ scratch.Get "zone" }};
}

server {
  listen *:443 ssl http2;
  server_name {{ .Name }}.{{ scratch.Get "zone" }};

  allow 127.0.0.1/32;
  {{- if eq .Name "registry" }}
  allow {{ env "attr.unique.network.ip-address" }}/32;
  allow 172.17.0.1/16;
  {{- end }}
  # acl: {{ or (index .ServiceMeta "nidito-acl") "none" }}
  {{- /*
  Transforms stuff like 'allow net1,net2; deny badNet' into
  allow 192.168.1.1/24;
  allow 192.168.2.1/24;
  deny 10.0.0.1/24;
  */}}
  {{- $serviceACLs := (or (index .ServiceMeta "nidito-acl") "") | replaceAll "; " ";" | split ";" }}
  {{- range $serviceACLs }}
    {{- $parts := . | replaceAll ", " "," | split " " }}
    {{- range (index $parts 1 | split ",") }}
  {{ index $parts 0 }} {{ or (scratch.Get (printf "network-%s" .)) "127.0.0.2/32" }};
    {{- end }}
  {{- end }}

  {{- if not (in .Tags "nidito.http.public") }}
  {{- scratch.MapSet "services" .Name "local" }}
  deny all;
  {{- else }}
  allow all;
  {{- scratch.MapSet "services" .Name "public" }}
  {{ end }}

  ssl_certificate     /ssl/{{ scratch.Get "zone" }}/cert.pem;
  ssl_certificate_key /ssl/{{ scratch.Get "zone" }}/key.pem;
  ssl_protocols       TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384";
  {{- /*The most CPU-intensive operation is the SSL handshake. There are two ways to minimize the number of these operations per client: the first is by enabling keepalive connections to send several requests via one connection */}}
  keepalive_timeout   70;

  {{- $proxy := (printf "http://%s:%d" .Address .Port) }}
  location / {
    client_max_body_size 500m;
    add_header X-Edge {{ $nodeName }} always;
    add_header X-Nidito-Service {{ .Name }} always;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    {{- if eq (index .ServiceMeta "nidito-http-buffering") "off" }}
    proxy_buffering "off";
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    {{- end }}

    {{- if eq (index .ServiceMeta "nidito-http-wss") "on" }}
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Connection "Keep-Alive";
    proxy_set_header Proxy-Connection "Keep-Alive";
    proxy_ssl_session_reuse off;
    proxy_cache_bypass $http_upgrade;
    {{- end }}

    resolver 10.42.20.1 valid=30s;
    proxy_pass {{ $proxy }};
  }
}

    {{- end }}
  {{- end }}
{{- end }}

{{- range ls (printf "cdn@%s" $dc ) }}

# cdn/{{ .Key }}
{{- $hostname := .Key }}
server {
  listen *:80;
  server_name www.{{ $hostname }} {{ $hostname }};
  return 301 https://{{ $hostname }};
}
server {
  listen *:443 ssl http2;
  server_name {{ $hostname }};

  allow all;

  ssl_certificate     /ssl/{{ $hostname }}/cert.pem;
  ssl_certificate_key /ssl/{{ $hostname }}/key.pem;
  ssl_protocols       TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384";
  keepalive_timeout   70;

  location / {
    rewrite ^(.*)/$ $1/index.html break;
    client_max_body_size   1m;
    proxy_http_version     1.1;
    proxy_set_header       Connection "";
    proxy_set_header       Authorization '';
    proxy_set_header       Host cdn.rob.mx.nyc3.digitaloceanspaces.com;
    proxy_hide_header      Set-Cookie;
    proxy_ignore_headers   Set-Cookie;
    proxy_intercept_errors on;
    proxy_buffering "off";
    resolver 1.1.1.1 valid=60s;
    proxy_pass             https://cdn.rob.mx.nyc3.digitaloceanspaces.com/{{ .Value }}$uri;

    add_header X-Nidito-Edge {{ $nodeName }} always;
    add_header X-Nidito-Service {{ .Key }} always;
  }
}
{{- end }}


{{- range $name, $data := (key "dns/static-entries" | parseJSON) }}
{{- scratch.MapSet "services" $name "static" }}
# dns/static-entries/{{ $name }}
server {
  listen *:80;
  server_name {{ $name }} {{ $name }}.{{ scratch.Get "zone" }};
  return 301 https://{{ $name }}.{{ scratch.Get "zone" }};
}
server {
  listen *:443 ssl http2;
  server_name {{ $name }}.{{ scratch.Get "zone" }};

  allow 127.0.0.1/32;
  allow {{ scratch.Get "core-network-range" }};
  deny all;

  ssl_certificate     /ssl/{{ scratch.Get "zone" }}/cert.pem;
  ssl_certificate_key /ssl/{{ scratch.Get "zone" }}/key.pem;
  ssl_protocols       TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384";
  keepalive_timeout   70;

  location / {
    client_max_body_size 500m;
    add_header X-Edge {{ $nodeName }} always;
    add_header X-Nidito-Service {{ $name }} always;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    resolver 10.42.20.1 valid=30s;
    proxy_buffering "off";
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    proxy_pass https://{{ $name }}.service.consul:{{ $data.port }};
  }
}

{{- end}}

server {
  listen *:443 ssl http2;
  server_name _
    {{ $nodeName }}.node.consul
    {{ $nodeName }}.node.{{ $dc }}.consul
    {{ $nodeName }}.{{ scratch.Get "zone" }};

  allow 127.0.0.1/32;
  allow {{ scratch.Get "core-network-range" }};
  deny all;
  root /var/lib/www;

  ssl_certificate     /ssl/{{ scratch.Get "zone" }}/cert.pem;
  ssl_certificate_key /ssl/{{ scratch.Get "zone" }}/key.pem;
  ssl_protocols       TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384";
  keepalive_timeout   70;

  location /nidito {
    allow 127.0.0.1/32;
    allow {{ scratch.Get "core-network-range" }};
    deny all;
    access_log off;
    default_type application/json;
  }

  location / {
    add_header X-Edge {{ $nodeName }} always;
    client_max_body_size 128k;
    default_type application/json;
    return 404 '{"message": "Not found"}';
  }
}

server {
  listen      *:80 default_server;
  server_name  _;
  root /var/lib/www;
  location /status {
    allow 127.0.0.1/32;
    allow 172.17.0.1/32;
    allow {{ env "attr.unique.network.ip-address" }}/32;
    allow {{ scratch.Get "core-network-range" }};
    deny all;
    stub_status;
    access_log off;
  }
  location /nidito {
    allow 127.0.0.1/32;
    allow 172.17.0.1/32;
    allow {{ scratch.Get "core-network-range" }};
    deny all;
    access_log off;
    default_type application/json;
  }
  location / {
    client_max_body_size 128k;
    default_type application/json;
    return 404 '{"message": "Not found"}';
  }
}
