data_dir = "{{ vector_data_dir }}"

[api]
enabled = true
address = "127.0.0.1:5540"

[sources.node_metrics]
type = "host_metrics"
collectors = [
  "cpu",
  "disk",
  "filesystem",
  "load",
  "host",
  "memory",
  "network"
]
namespace = "host"
scrape_interval_secs = 5

[sources.http_proxy]
type = "nginx_metrics"
endpoints = [ "http://127.0.0.1:80/status" ]
scrape_interval_secs = 5
namespace = "http_proxy"

[transforms.raw_metrics]
type = "remap"
inputs = ["node_metrics", "http_proxy"]
source = """
.source = "vector"
.layer = "infra"
"""


[sources.journald_raw_logs]
type = "journald"
current_boot_only = true
include_units = ["consul", "nomad", "vault", "docker", "sshd"]


[sources.nomad_allocs]
type = "file"
ignore_older_secs = 600
include = [ "/var/lib/nomad/alloc/**/alloc/logs/*" ]
read_from = "beginning"



[transforms.journald_logs]
type = "remap"
inputs = ["journald_raw_logs"]
source = """
if .SYSLOG_IDENTIFIER == "sshd" {
  data = {
    "@level": "info",
    "@message": .message
  }
} else {
  data = parse_json(.message) ?? parse_syslog(.message) ?? parse_logfmt(.message) ?? {
    "@level": "info",
    "@message": .message
  }
}

res = {
  "source": "journald",
  "stream": "stdout",
  "service": .SYSLOG_IDENTIFIER,
  "host": .host,
  "level": del(data.@level),
  "message": del(data.@message)
}

if data.@message != "" {
  res.message = del(data.@message)
}

if data.msg != "" {
  res.message = del(data.msg)
}

if data.@timestamp != "" {
  res.timestamp = del(data.@timestamp)
}

if data.ts != "" {
  res.timestamp = del(data.ts)
}

if data.time != "" {
  res.timestamp = del(data.time)
}

if data.@module != "" {
  res.module = del(data.@module)
}

if ._TRANSPORT != "syslog" {
  res.stream = ._TRANSPORT
}

., err = merge(res, data)
"""


[sinks.prometheus]
type = "prometheus_remote_write"
inputs = ["raw_metrics"]
endpoint = "https://prometheus.nidi.to/api/v1/write"
default_namespace = "nidito_node"
healthcheck.enabled = false

[sinks.loki]
type = "loki"
inputs = ["journald_logs"]
endpoint = "https://loki.nidi.to"

encoding.codec = "json"
healthcheck.enabled = true

labels.layer = "infra"
labels.stream = "{%raw%}{{{%endraw%} stream {%raw%}}}{%endraw%}"
labels.service = "{%raw%}{{{%endraw%} service {%raw%}}}{%endraw%}"
labels.module = "{%raw%}{{{%endraw%} module {%raw%}}}{%endraw%}"
labels.host = "{%raw%}{{{%endraw%} host {%raw%}}}{%endraw%}"
labels.level = "{%raw%}{{{%endraw%} level {%raw%}}}{%endraw%}"
labels.namespace = "host_logs"
# remove fields that have been converted to labels to avoid having them twice
remove_label_fields = false

[sources.vector_logs]
type = "internal_logs"

[sinks.debug]
type = "console"
inputs = [ "vector_logs" ]
encoding.codec = "json"
target = "stdout"
