# for log_level, tls, and vault configuration, see: config.hot-reload.hcl
data_dir = "{{ nomad.data }}"
region = "{{ node.dc }}"
datacenter = "{{ node.dc }}"
name = "{{ ansible_hostname }}"
log_json = true
{% set dc = config.datacenters[node.dc] %}

bind_addr = "{% raw %}{{{% endraw %} GetPrivateInterfaces | include \"network\" \"{{ dc.subnet }}\" | attr \"address\" {% raw %}}}{% endraw %}"

server {
  enabled          = true
  heartbeat_grace  = "30s"
  min_heartbeat_ttl = "20s"
  # needs to be incremented gradually as servers boot
  bootstrap_expect = {% if dc.primary %}3{% else %}1{% endif %}

  # 7-day retention
  job_gc_threshold = "168h"
  eval_gc_threshold = "168h"
  batch_eval_gc_threshold = "168h"
  deployment_gc_threshold = "168h"

  # gossip encryption
  # https://developer.hashicorp.com/nomad/tutorials/transport-security/security-gossip-encryption
  encrypt = "{{ config.services.nomad.encryption_key }}"
{% for name, odc in config.datacenters.items() if odc.primary %}
  authoritative_region = "{{ name }}"
{% endfor %}
}

ports {
  http = "{{ config.services.nomad.ports.http }}"
  rpc = "{{ config.services.nomad.ports.rpc }}"
  serf = "{{ config.services.nomad.ports.serf }}"
}

acl {
  enabled = true
{% if not dc.primary %}
  replication_token = "{{ dc.nomad.replication.secret }}"
{% endif %}
}

# https://github.com/perrymanuk/hashi-homelab/blob/master/configs/nomad-server.hcl
telemetry {
  disable_hostname = true
  prometheus_metrics = true
  publish_allocation_metrics = true
  publish_node_metrics = true
  use_node_name = false
}

client {
  enabled       = true
  node_class = "{{ node.hardware.os }}-{{ node.hardware.arch }}"
  memory_total_mb = "{% if ansible_memtotal_mb <= 1500 %}1000{% else %}{{ ansible_memtotal_mb * 0.9 | round | int }}{% endif %}"

  cni_path = "/opt/cni/bin"
  cni_config_dir = "/opt/cni/config"

  options {
    driver.whitelist = "docker,exec,raw_exec"
  }

  template {
    # https://developer.hashicorp.com/nomad/docs/configuration/client#template-parameters
    # *_retry prevents tasks from dying when vault, consul or nomad go away
    # at 250ms of backoff time, and max_backoff of 1m, growing (2^n) every retry,
    # it'll give up after (2 minutes before backoff reaches 1m), and for the next 12 hours
    vault_retry {
      backoff = "250ms"
      max_backoff = "1m"
      attempts = 728
    }
    consul_retry {
      backoff = "250ms"
      max_backoff = "1m"
      attempts = 728
    }
    nomad_retry {
      backoff = "250ms"
      max_backoff = "1m"
      attempts = 728
    }
  }

  meta {
    # set dns_zone to avoid consul-template choking on `secret (printf 'a/%s')`
    # https://github.com/hashicorp/consul-template/issues/1423
    dns_zone = "{{ config.datacenters[node.dc].dns.zone }}"
    arch = "{{ node.hardware.arch }}"
    model = "{{ node.hardware.model }}"
    os_family = "{{ node.hardware.os | split('/') | first }}"
    os_version = "{{ node.hardware.os | split('/') | last }}"
{% for key, value in node.tags.items() %}
    {{ key }} = "{{ value }}"
{% endfor %}
  }

  host_network "private" {
    cidr = "{{ dc.subnet }}"
  }

  host_network "public" {
    cidr = "{% raw %}{{{% endraw %} GetPublicInterfaces | attr \"address\" {% raw %}}}{% endraw %}"
  }
}

plugin "raw_exec" {
  config {
    enabled = true
  }
}

plugin "docker" {
  config {
    extra_labels = [
      "job_name",
      "task_group_name",
      "task_name",
      "namespace",
      "node_name",
      "region",
      "datacenter"
    ]

    gc {
      image_delay = "192h" # 8 days
    }

    volumes {
      enabled = true
    }
  }
}

consul {
  address = "https://{{ node.name }}.node.consul:{{ config.services.consul.ports.https }}"

  token = "{{ config.services.nomad.consul_token }}"
  ca_file = "{{ nomad.config }}/tls/ca.pem"

  auto_advertise = true
  server_auto_join = true
  client_auto_join = true

  tags = [
    "infra",
    "nidito.metrics.enabled",
    "nidito.metrics.path=/v1/metrics",
    "nidito.metrics.hc-prometheus-hack"
  ]
}

ui {
  enabled =  true

  consul {
    ui_url = "https://consul.service.consul:{{ config.services.consul.ports.https }}/ui"
  }

  vault {
    ui_url = "https://vault.service.consul:{{ config.services.vault.port }}/ui"
  }

  label {
    text = "{{ node.dc }}"
    background_color = "{% if dc.primary %}#c11145{% else %}#1d9467{% endif %}"
    text_color = "#ffffff"
  }
}
