- name: Get installed version
  shell: "{{ nomad.bin }} --version | head -n 1 | cut -dv -f2"
  register: installed_nomad_version
  ignore_errors: yes
  check_mode: no

- set_fact:
    needs_install: "{{ installed_nomad_version.stdout != config.services.nomad.version}}"
  check_mode: no

- set_fact:
    golang_artifact_arch: "arm64"
  when: node.hardware.arch == 'arm64'

- set_fact:
    golang_artifact_arch: "amd64"
  when: node.hardware.arch == 'x86_64'

- name: Create nomad directories
  become: true
  file:
    path: "{{ item }}"
    owner: "{{ nomad.user }}"
    group: "{{ user.group }}"
    state: directory
    mode: u=rwx,g=rx,o=
  with_items:
    - "{{ nomad.config }}"
    - "{{ nomad.data }}"
    - "{{ nomad.config }}/tls"
    # make sure the bin prefix is /nidito (not /usr/...)
    # before enabling this, otherwise risk denying our local user account
    # permission to execute anything in /usr/(local/)bin!
    # - "{{ nomad.bin | dirname }}"

- include_tasks: "{{ node.hardware.os }}.yml"

- name: Recover cluster
  become: true
  notify: Restart nomad service
  when: config.services.nomad.recover_cluster
  template:
    src: templates/peers.json.j2
    dest: "/var/lib/nomad/server/raft/peers.json"
    owner: "{{ nomad.user }}"

- name: Install TLS certs
  become: true
  no_log: true
  copy:
    content: "{{ item.content }}"
    dest: "{{ nomad.config }}/tls/{{ item.name }}"
    owner: "{{ nomad.user }}"
    group: "{{ user.group }}"
    mode: u=rwx,g=rx,o=
  with_items:
    - name: ca.pem
      content: "{{ config.services.ca.cert }}"
    - name: key.pem
      content: "{{ node.tls.key }}"
    - name: cert.pem
      content: "{{ node.tls.nomad }}"
  notify: restart nomad

- name: Configure nomad
  become: true
  template:
    src: templates/config.hcl.j2
    dest: "{{ nomad.config }}/config.hcl"
    owner: "{{ nomad.user }}"
    group: "{{ user.group }}"
    mode: u=rw,g=r,o=
  notify: restart nomad

- name: Configure nomad tls, vault and log_level
  become: true
  template:
    src: templates/config.hot-reload.hcl.j2
    dest: "{{ nomad.config }}/config.hot-reload.hcl"
    owner: "{{ nomad.user }}"
    group: "{{ user.group }}"
    mode: u=rw,g=r,o=
  notify: reload nomad
