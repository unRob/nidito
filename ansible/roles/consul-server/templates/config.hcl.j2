datacenter = "{{ node.dc }}"
primary_datacenter = "{% for name, dc in config.datacenters.items() if 'primary' in dc and dc.primary %}{{ name }}{% endfor %}"
node_name = "{{ node.name }}"

log_level = "warn"
log_json = true

enable_syslog = true
data_dir = "{{ consul_data_dir }}"
server = true
ui_config {
  enabled = true
}
{% set dc = config.datacenters[node.dc] %}

# -----------------------------
# Networking
# -----------------------------
# expose the server on this DC's main network
bind_addr = {% raw %}"{{ GetPrivateInterfaces | include \"network\" \"{% endraw %}{{ dc.subnet }}{% raw %}\" | attr \"address\" }}"{% endraw %}

# let only localhost and the docker network talk to the consul client
client_addr = {% raw %}"{{ GetPrivateInterfaces | include \"network\" \"{% endraw %}{{ dc.subnet }}{% raw %}\" | attr \"address\" }} {{ GetInterfaceIP \"docker0\"}}"{% endraw %}

{% if dc.primary %}
# Primary DC has multiple servers
retry_join = [ "{{ dc.dns.leaders }}.{{ dc.dns.zone }}" ]
{% else %}
# Secondary DCs have a single server
bootstrap_expect = 1
# reply with our "wan" address when servicing dns/http requests from other DCs
translate_wan_addrs = true
{% endif %}

# Bind all servers together
retry_join_wan = [
  {% for name, rdc in config.datacenters.items() if name in dc.peering.peers %}
  "{{ rdc.dns.leaders }}.{{ rdc.dns.zone }}",
  {% endfor %}
]

# -----------------------------
# Encryption
# -----------------------------
# https://learn.hashicorp.com/consul/security-networking/agent-encryption
encrypt = "{{ config.services.consul.encryption_key }}"
encrypt_verify_incoming = true
encrypt_verify_outgoing = true

# https://learn.hashicorp.com/tutorials/consul/tls-encryption-secure
# inbound http requests from the upstream proxy won't use mTLS
verify_incoming = false
verify_incoming_rpc = true
verify_outgoing = true
verify_server_hostname = true
ca_file = "{{ consul_config_dir }}/tls/ca.pem"
cert_file = "{{ consul_config_dir }}/tls/cert.pem"
key_file = "{{ consul_config_dir }}/tls/key.pem"
auto_encrypt {
  allow_tls = true
}

acl {
  enabled = true
  default_policy = "deny"
  # https://www.consul.io/docs/agent/options#acl_enable_token_persistence
  enable_token_persistence = true
  # https://learn.hashicorp.com/tutorials/consul/access-control-replication-multiple-datacenters?in=consul/security-operations#configure-the-servers
  enable_token_replication = true
  down_policy = "extend-cache"
  tokens {
    default = "{{ node.token.consul.node }}"
    {% if "replication" in node.token.consul %}
    replication = "{{ node.token.consul.replication }}"
    {% endif %}

  }
}

ports {
  server = {{ config.services.consul.ports.server }}
  serf_lan = {{ config.services.consul.ports.serf_lan }}
  serf_wan = {{ config.services.consul.ports.serf_wan }}
  dns = {{ config.services.consul.ports.dns }}
  http = {{ config.services.consul.ports.http }}
  https = {{ config.services.consul.ports.https }}
}

telemetry {
  prometheus_retention_time = "744h"
  disable_compat_1.9 = true
}

services {
  id ="host-telemetry"
  name = "host-telemetry"
  port = 5540
  address = "{{ node.address }}"

  tags = [
    "ansible",
    "nidito.dns.enabled",
    "nidito.metrics.host",
  ]

  meta = {
    nidito-acl = "allow {% for name, net in config.networks.items() if "core" in net %}{{ name }}{% endfor %}"
  }

  checks = [
    {
      id = "host-telemetry-http-check-{{ node.name }}"
      name = "host-telemetry-http-check-{{ node.name }}"
      tcp = "{{ node.address }}:5540"
      interval = "30s"
      timeout = "1s"
    }
  ]
}

{% if "builtin_services" in node %}
{% for svc_name, service in node.builtin_services.items() %}
services {
  id = "{{ svc_name }}"
  name = "{{ svc_name }}"
  port = {{ service.port }}
  address = "{{ node.address }}"

  tags = [
    "ansible",
    "nidito.dns.enabled",
    "nidito.http.enabled",
  ]

  meta = {
    nidito-acl = "allow {{ service.zone }}"
    nidito-http-zone = "{{ service.zone }}"
    nidito-http-buffering = "off"
  }

  checks = [
    {
      id = "{{ svc_name }}-http-check-{{ service.port }}"
      name = "{{ svc_name }}-http-check-{{ service.port }}"
      tcp = "localhost:{{ service.port }}"
      interval = "30s"
      timeout = "1s"
    }
  ]
}
{% endfor %}
{% endif %}
# -----------------------------
