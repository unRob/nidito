- name: Get installed coredns+consul_catalog plugin version
  become: true
  shell: |
    {{ coredns.bin }} -version | awk -F@ '/coredns-consul/ {print $2}'
  register: installed_version
  check_mode: no
  ignore_errors: yes

- set_fact:
    golang_artifact_arch: "arm64"
  when: node.hardware.arch == 'arm64'

- set_fact:
    golang_artifact_arch: "amd64"
  when: node.hardware.arch == 'x86_64'

- set_fact:
    golang_artifact_arch: "mips64"
  when: node.hardware.arch == 'mips64'

- set_fact:
    needs_install: "{{ installed_version.stdout != coredns.version }}"


- include_role:
    name: _service
  vars:
    service_name: coredns
    # launchd_name: io.coredns
    # launchd_template: templates/service.plist.j2
    systemd_template: templates/coredns.service.j2

- include_tasks: "{{ node.hardware.os }}.yml"

- name: Create directories
  become: true
  file:
    path: "{{ item }}"
    owner: "{{ coredns.user }}"
    group: "{{ coredns.group }}"
    state: directory
    mode: u=rwx,g=rwx,o=
  with_items:
    - "{{ coredns.config }}"
    - "{{ coredns.config }}/zones"

- name: Configure coredns
  become: true
  template:
    src: templates/Corefile.j2
    owner: "{{ coredns.user }}"
    group: "{{ coredns.group }}"
    dest: "{{ coredns.config }}/Corefile"
    mode: u=rw,g=r,o=
  notify:
    - restart service

- name: Install tepetl zone
  become: true
  template:
    src: "templates/tepetl.zone.j2"
    owner: "{{ coredns.user }}"
    group: "{{ coredns.group }}"
    dest: "{{ coredns.config }}/zones/tepetl"
    mode: u=rw,g=r,o=
  notify:
    - restart service

- name: Install main zone
  when: '"authority" in config.datacenters[node.dc].dns and config.datacenters[node.dc].dns.authority != "external"'
  become: true
  template:
    src: "templates/main.zone.j2"
    owner: "{{ coredns.user }}"
    group: "{{ coredns.group }}"
    dest: "{{ coredns.config }}/zones/main"
    mode: u=rw,g=r,o=
  notify:
    - restart service
